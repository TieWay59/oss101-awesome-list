0
00:00:01,740 --> 00:00:03,960
大家好，欢迎回到我们的课程，
Hello,
everyone and welcome back to

2
00:00:03,961 --> 00:00:11,670
此课程是关商业业开源软件创业以及如何将其从大学教育中抽离出来。
course, course on commercial open source software startups and how to spend such a startup off from university.

3
00:00:13,230 --> 00:00:16,680
我们刚好处在此次系列课程的中间。
We are squarely in the middle of the course.

4
00:00:16,681 --> 00:00:20,190
上次我们谈到开源软件是一种产品， 
Last time we talked about open source software is an artifact,

5
00:00:20,191 --> 00:00:28,350
今天我们将把开源作为一个项目或社区事业来讨论。
and today we will talk about open source as a project or as a Community undertaking.

6
00:00:28,351 --> 00:00:34,080
下一次，我们将讨论开源软件的商业化策略。
After that,
next time,
we will talk about commercialization strategies around open source.

9
00:00:35,040 --> 00:00:44,910
所以今天我们将会探索开源的另一个定义，可以说此次的开源定义是之前定义的加强版，
So today we will discover that there is a second alternative or enhanced definition of open source compared to the one I gave you last time,

10
00:00:44,911 --> 00:00:50,640
开源以社区中人们的协作活动为中心。
and it's centered on the collaborative activity of people in communities.

11
00:00:50,641 --> 00:00:53,580
然后我们会去看一下这些社区是怎么形成的？
And then we will look at how these communities have formed,

12
00:00:53,581 --> 00:01:00,870
然后开源组织如何找到组织结构来支持底层的开源项目？
how they have found organizational structures to sustain the underlying open source projects and so forth.

13
00:01:05,490 --> 00:01:09,960
那么什么是开源项目呢？
So what is an open source project?

14
00:01:09,961 --> 00:01:17,340
到目前为止我们讨论了软件，我们需要了解一下产品，
So far, we talked about software and we need to understand that the artifact,

15
00:01:17,341 --> 00:01:26,370
可以说这不是唯一的开源创新，也不是最重要的开源创新。
arguably it's not even necessarily the only so it's certainly not of the only innovation of open source.
Maybe not even the most important one.

17
00:01:27,390 --> 00:01:30,600
当你查看open Source initiative网站的时候，   
When you look to the open Source initiative website,

18
00:01:30,601 --> 00:01:32,910
你会发现开源已经从法律定义中抽离出来了，
You will find that there is

19
00:01:33,960 --> 00:01:46,380
这涉及到开源软件许可的10个需求，满足这些需求之后就可以把软件许可转化为开源许可了。
separately from the legal definition, which involved the 10 requirements for an open source software license that turned software license into an open source license.

20
00:01:46,381 --> 00:01:47,430
放眼望去，
When you look beyond that,

21
00:01:47,431 --> 00:01:52,380
你会发现开源其实是一种开发方法，
you will find that there is a definition of open source as a development method.

22
00:01:53,220 --> 00:01:59,400
对那些利用了同行评审和过程透明的软件使用等。
For software that harnesses the power of peer review and transparency of process,
and so forth.

24
00:01:59,401 --> 00:02:05,550
你可能会在公共辩论中了解到这些事情，
As you can read here so while in public debate,

25
00:02:05,551 --> 00:02:16,560
上节课对于开源的法律定义其实是具有主导性的，今天我们所关注的是第二种定义，即人们如何相互协作。
often this legal definition from the last lecture is dominant. There actually is the second definition which focuses on it's how the people work with each other,

26
00:02:16,561 --> 00:02:22,680
开源其实是一种开发方法，这是基于同行评审的。
it's a development method, it's distributed based on peer review and so forth.

27
00:02:23,550 --> 00:02:26,820
所以这有什么重要的呢？
So how is that important?

28
00:02:26,821 --> 00:02:32,280
这是与GNU emacs无关的创新，
well,
it is an innovation that didn't come with GNU emacs,

30
00:02:32,281 --> 00:02:43,380
而是Linux kernel所带来的创新，并将纯粹的软件编程了很多人的项目。
but that came with the Linux kernel and has been involved ever since to turn the pure software into a project of people.

31
00:02:44,970 --> 00:02:45,600
实话实说，
To be honest,

32
00:02:45,601 --> 00:02:53,040
这也不是一个真正的项目一位我们讨论软件的时候，也顺带讨论了软件相关的社区。
it's actually not really a project because we're talking about the software plus a community of people around it. So,

33
00:02:53,041 --> 00:02:54,000
根据我的定义，
In my definition,

34
00:02:54,001 --> 00:02:59,340
开源项目是在开源许可协议下提供的软件。
an open source project is a piece of software provided on an open source license.

35
00:02:59,341 --> 00:03:09,360
这是产品的观点，即社区中的很多成员一块开发，并且社区中的成员需要遵守开放协作的原则。
that's the artifact view developed by a community of people using certain to be discussed principles of open collaboration.

36
00:03:09,361 --> 00:03:12,510
这也不是一个项目，因为它没有完整的截止日期。
It's not a project because there is no defined end date.

37
00:03:12,511 --> 00:03:17,370
该项目背后也没有相应的商业咨询公司，该项目是开放性的项目。
There is no consulting company behind it.
There is no set and date.
it's open ended.

40
00:03:17,371 --> 00:03:23,730
这就是为什么这个项目更像是一个产品，而绝大多数开源软件根本就不是一个产品，
That's why it's more like a product except that most open source software is not a product.

41
00:03:23,731 --> 00:03:26,400
它可能就是一个可在产品中使用的组件。
it's just a component perhaps used in products.

42
00:03:28,050 --> 00:03:39,780
所以开源软件项目所对应的社区是一个多样性的社区，  
So that community of people here in a real open source software project that is a community project has to be diverse.

43
00:03:39,781 --> 00:03:41,250
开源项目社区中的人员相互协作，
They collaborate with each other,

44
00:03:41,251 --> 00:03:49,440
但是有一个原则，这些人员不能来自同一个雇主。
but they can't,
for example,
be from the same employer,
at least according to the rules of some.

48
00:03:49,441 --> 00:03:54,720
我们可以看到Apache software foundation是一个开源软件基金会，
We will see how Apache software foundation is an open source software foundation.
 
49
00:03:54,721 --> 00:03:58,320
这是很多开源项目的宿主。
That's the host to many important open source projects,

50
00:03:58,321 --> 00:04:06,300
只有当很多人员参与进来的时候才有社区的概念，
and they
only talk about a community of people if there's a diversity of the people involved.

52
00:04:06,301 --> 00:04:11,280
其中这些社区人员必须有三个来源，这对应着法律实体。
So at least three different sources,
meaning legal entities.

54
00:04:11,281 --> 00:04:13,470
不同公司的职员自然是项目的贡献者，
so different companies are natural 

55
00:04:13,471 --> 00:04:26,370
你希望社区中会有更丰富的多样性，这样项目才是一个真正的开源项目，然后就是社区开源项目。
people who contribute, you want diversity among the people in the community to call it a real open source project and then a community open source project.

56
00:04:28,500 --> 00:04:40,620
这种协作形式，开源式的协作，我称之为开源协作，开源协作有三个重要特征。
This form of collaboration, the open source style of collaboration,
I call open collaboration,
and it's marked by three important characteristics.

59
00:04:41,790 --> 00:04:48,600
开源协作的过程中，每个人都可以做出贡献，  
An open source 
collaboration,
open collaboration,
everyone can possibly contribute,

64
00:04:49,650 --> 00:04:55,170
意思是对于一个开源软件醒目，每个人都可以加入，
meaning a software open source project is open for you to join

65
00:04:55,171 --> 00:05:04,770
只要你是一个理性的人就可以。开源软件项目有时候会推销自己，
if you are a reasonable person and you are not a priori hidden away.
Rather as we will see open source projects market themselves,

67
00:05:04,771 --> 00:05:05,730
这些开源项目希望自己被挖掘。
they want to be found.

68
00:05:06,810 --> 00:05:10,860
所以如果你的贡献有意义的话那么每个人是都可以参与贡献的，
So everyone can possibly contribute if your contribution makes any sense.

69
00:05:11,910 --> 00:05:15,000
这也是一种精英主义。
It's also a meritocratic not supposed to be meritocratic,

70
00:05:15,001 --> 00:05:25,680
这意味着所有的讨论或决定都是公开的，某些决定是基于争论而非地位得到的，
meaning all discussions or decisions are public and decisions are made based on the merits of arguments rather than on status,

71
00:05:25,681 --> 00:05:28,710
所以某些决定的出现可能要等很长时间。
so this can lead to sometimes lengthy.

72
00:05:28,711 --> 00:05:36,120
甚至你会对某些讨论感到反感，但是最后，因为这些讨论都是公开的，   
Maybe even you might feel obnoxious discussions,
but at the end,
since it's public,

75
00:05:36,121 --> 00:05:39,690
那么人们就可以坚持自己所说的话。
since people can be held to what they said,

76
00:05:39,691 --> 00:05:43,890
往往好决定都是基于争论得出的。
it's usually a good decision that comes out based on the merits of the argument.

77
00:05:45,300 --> 00:05:51,420
最后，社区中的成员也是在实现自组织，
And finally,
people in the community are organizing their processes themselves.

79
00:05:51,421 --> 00:05:54,690
通常情况下开源项目没有大老板。
There's no big boss in an open source project,

80
00:05:54,691 --> 00:05:59,910
就算有领导的话，他也不会告诉你你应该怎么做，这就是规则。
usually,
who tells you how to do it.
Or if there is one,
that's the rules,

84
00:05:59,911 --> 00:06:03,270
开源项目也不是一家公司说了算的，
but they have not been dictated by a company.

85
00:06:03,271 --> 00:06:07,140
如果你不喜欢这些规则，你就不要参与了。
And then if you don't like the rules,
you don't participate.

87
00:06:08,880 --> 00:06:13,890
与传统工作相比，开源项目中的工作是分层的，不同层别上的项目彼此隐藏。  
Compare this with traditional work,
which is hierarchical,
where projects hide each other.

90
00:06:13,891 --> 00:06:23,670
因为该项目不接受开源贡献，并且在公司内部也是存在职员的等级制度。
So it's not open for contribution where there is an established status hierarchy by way of the positions of people in the company,

91
00:06:23,671 --> 00:06:26,340
公司中最终会有CTO告诉你应该怎么做，
Where the CTO in the end
gets to say how it's done,

93
00:06:26,341 --> 00:06:33,300
无论你的工作做的是好还是坏，最终公司都是希望你具有可被替代性。
whether it's good or bad,
and finally,
companies always want you to be replaceable.

96
00:06:33,301 --> 00:06:39,240
因此在公司内部人员之间并非是进行自组织而是大家都需要遵守相关规定。
Hence no self-organized process rather prescribed process.

97
00:06:39,241 --> 00:06:49,290
你无论如何都要使用scrum,因为公司不想特别依赖一个人，或者说公司不想太多依赖一个人。
You have to use scrum this way or that way, because no company wants to depend specifically on a single person or too many on individual people.

98
00:06:51,120 --> 00:07:00,240
在我们以这种方式定义开源之前，这些开放协作的规则已经通过不同的方式进行阐述了。
And these principles of open collaboration have been stated and reframed in different ways before we define them this way.

99
00:07:00,241 --> 00:07:05,580
传统的架构方式中称开源为大教堂，这就是开源项目。  
A traditional way of framing it is calling it the cathedral.

100
00:07:05,581 --> 00:07:17,310
这就是开源项目，项目内部熙熙攘攘。
That's the open source project.
that's the company and the bizarre.
That's the open source project where the hustle and bustle of a bizarre.

103
00:07:17,311 --> 00:07:25,830
这也解释了如何完成工作，公司内部的“开源项目”使得我们努力工作，这些项目被仔细制作。
This explains how the work gets done while inside companies cathedral make us hard work and it's carefully crafted topped on.

104
00:07:27,060 --> 00:07:29,640
其实吧，我不太认可这个比喻，
I don't believe much of this metaphor here,

105
00:07:29,641 --> 00:07:36,690
但它是人们所喜欢引用的文章中的一部分，
but it's historically an important piece of writing that people like to cite,

106
00:07:36,691 --> 00:07:38,070
所以我也想给你展示一下。
So I wanted to show it to you.

107
00:07:39,270 --> 00:07:41,880
更有趣的是Apache所设置的开源协作的方式，
More interestingly is the Apache way,

108
00:07:41,881 --> 00:07:50,520
这是一份声明，声明基金会如何组织项目的发展。
which is a collection of statements about how their patches of the foundation organizes its development.

109
00:07:50,521 --> 00:07:54,000
这虽然不是一种规定的方式，但是你知道如何操作，
It's not prescriptive in a way that you would know how to act,

110
00:07:54,001 --> 00:07:58,650
这种开源项目的组织方式也确实捕捉到了重要的事情。
but it's a nice capture of what's important.

111
00:07:58,651 --> 00:08:11,850
Apache Software Foundation存在很久了，提供了很多开源软件，所以这个社区值得尊敬，
And the Apache Software Foundation has been around for a long time and has given us many important open source software pieces, so you should be respectful of people, you should focus on creating high quality,
 
112
00:08:11,851 --> 00:08:16,020
你不应该否认商业化而是应该专注于创建高质量软件。
you should not deny commercialization,
ah,
etc.

115
00:08:16,021 --> 00:08:19,710
这都是开源比较重要的方面， 
and so these are all important aspects of open source.

116
00:08:19,711 --> 00:08:22,080
根据Apache Software Foundation的说法，
According to the Apache Software Foundation.

117
00:08:29,010 --> 00:08:34,920
开源软件项目会有一个社区，
So then open
source software projects have a community,

119
00:08:34,921 --> 00:08:44,970
某些人以及某些公司可能参与进来这个项目。
and that community is the group of people and companies engaged with the open source project. Within that community they're the developers,

120
00:08:44,971 --> 00:08:47,850
所以并不是每个人都得是开发人员，
so not everyone,
has to be a developer,

122
00:08:47,851 --> 00:09:00,300
开发者社区通常规模都很大，并且社区中的很多人都在使用这个软件。
the developer community of those developing the software and the user community of a larger,
much larger than the developer communities are those who are using the software.

124
00:09:00,301 --> 00:09:03,300
开发人员甚至不知道你在使用这个软件，
The developers may not even know that you are using the software,

125
00:09:03,301 --> 00:09:05,460
这实际上也是常见的情况。
which is actually the common case.

126
00:09:05,461 --> 00:09:12,870
举个例子，如果应为遇到了一个bug需要交流的时候，你大声说了出来，
But if you speak up,
for example,
because you have a bug or to communicate,

129
00:09:12,871 --> 00:09:15,600
然后你就成为这个软件的用户了。
then you become known as a user of the software.

130
00:09:17,730 --> 00:09:22,740
开源项目定义了我们的关键角色，  
And open source projects define our critical roles.

131
00:09:22,741 --> 00:09:27,690
这关系到人们怎样看待开源项目以及怎样看待开源社区的，
That's how people think about open source projects and the communities they form,

132
00:09:27,691 --> 00:09:36,150
开源社区中的角色可能是通常被称为用户，
and these roles or positions really are called user, just using the software contributor.

133
00:09:36,151 --> 00:09:37,830
如果你做出了贡献的话那么你就会被称为软件贡献者。
You made contributions,

134
00:09:37,831 --> 00:09:43,950
如果你不是核心团队的成员那么项目的committer，
but you're not part of the core team and then committer where you are a key,

135
00:09:43,951 --> 00:09:52,020
即是项目的核心成员会这样写道，“写代码库”的权利。
A core member of the team with commit writes meaning change
Rights,
Write rights to the code base.

138
00:09:53,520 --> 00:09:59,280
如果存在等级制度或职业发展方向的话，
You advance,
arguably if this is a status hierarchy or a career path,

140
00:09:59,281 --> 00:10:11,160
你对项目做了贡献，比如修复了一个bug，可以是一个补丁，那么你就从用户变成一个贡献者了。
you advanced from being a user to be the being contributor simply by contributing something, could be a bug fix, could be a small patch.

141
00:10:11,161 --> 00:10:14,640
无论你做什么，只要是有价值的贡献， 
Whatever you do.
Ah,
if it's a valuable contribution,

144
00:10:14,641 --> 00:10:17,850
你就会被提升为一个项目贡献者。
you're implicitly promoted to being a contributor.

145
00:10:19,830 --> 00:10:24,570
如果你继续对开源项目贡献代码，
However,
if you keep contributing and its code usually so,

147
00:10:24,571 --> 00:10:30,090
如果你是一个软件开发人员，你可以提交项目的各种补丁，
if you're a software developer and you're committing contributing patches and patches,

148
00:10:30,091 --> 00:10:38,970
目前项目的核心成员会审查你的补丁以及审查你的代码提交。
what happens is that the existing core team members have to review all your patches, all your submissions.

149
00:10:38,971 --> 00:10:48,720
一个代码贡献者不能改变项目的代码库，因为他们没有对代码库的写权限以及提交权限。
A contributor can not changed the code base of the project,
at least not the official one because they do not have the change
writes, the commit rights.

152
00:10:48,721 --> 00:10:54,990
只有项目的committer才对主代码仓库有提交权限。
Only committers have the change rights,
the commit rights to the main code repositories.

154
00:10:54,991 --> 00:11:05,550
所以开源项目的贡献者提交对于项目的更改，然后项目的核心成员会审查这些更改，    
so a contributor submits
proposed changes, the existing core team members committers review those,

156
00:11:05,551 --> 00:11:16,680
如果这些被提交的更改还不错，那么项目的comitter会把这些贡献放到代码库中，
and if the submitted or suggested changes are good,
they will be included in the code base.
This way the contribution becomes real.

159
00:11:16,681 --> 00:11:24,540
你对项目所做的这些贡献就被接收了。如果一个项目贡献者持续贡献，
It gets accepted into the code base. Now, if someone keeps contributing over and over again and the committers

160
00:11:24,541 --> 00:11:32,520
并且项目的commiter发现这是一份高质量的工作，那么committer可能就会变得些许敷衍。
Learn  it's high quality work and they really mostly just waved it. There is not a lot of review work to be done,

161
00:11:32,521 --> 00:11:35,760
那么就没有那么多的审查工作要去做，commiter对该代码贡献者的贡献也没有什么需要抱怨的，
nothing to complain about, nothing to change.

162
00:11:35,761 --> 00:11:44,340
然后这位项目的贡献者会被提升为一位committer，需要现在项目中的committer投票决定。
Then a contributor can be made by vote of the committers, the existing committers,
Ah,
can be made one of them.

165
00:11:45,480 --> 00:11:51,390
这意味着这位开发者的身份从一个项目贡献者升级为了项目的committer，
Meaning a contributor can advance from contributor status to committer status,

166
00:11:51,391 --> 00:11:53,820
这是很显然的一个环节。
and that is an explicit step.

167
00:11:53,821 --> 00:11:56,370
所以项目中现在的committer需要投票，  
So the committers usually have to vote,

168
00:11:56,371 --> 00:12:03,840
是否希望这个额外的人成为核心团队的一部分，并使其拥有更多的权利。
do we want that additional person as part of the core team with extended rights,

169
00:12:03,841 --> 00:12:06,330
如果这些committer说没问题，我们想要这个人，
and then if they say yes,
we want that person.

171
00:12:06,331 --> 00:12:13,920
我们认为这人还不错，我们觉得可以和他一起工作，我们也不会讨厌他。
we think this is a nice person,
we think they can work with us and we won't hate them,

173
00:12:13,921 --> 00:12:17,490
那么他们就会让你成为一位commiter，然后他们会宣布这一结果，
and then they will make you committer and then they will announce it.

174
00:12:17,491 --> 00:12:19,200
这其实是很重要的一个步骤。
So that is an important step to take.

175
00:12:21,780 --> 00:12:24,600
项目贡献者以及项目committer之间需要交互，
This interplay between contributor and committer,

176
00:12:24,601 --> 00:12:27,660
其中项目committer时候项目贡献者的一个高级状态。
which is a status advance for the contributor.

177
00:12:27,661 --> 00:12:33,060
这种相互作用形式其实也是开源项目质量保证的主要机制。
But this interplay is also the main quality assurance mechanism of open source.

178
00:12:33,061 --> 00:12:41,640
有很多事情要做，首先项目贡献者需要提交补丁贡献，然后项目committer会接受它。
A lot is happening here between a contributor
submitting a patch of proposed contribution and the committers accepting it.

180
00:12:41,641 --> 00:12:42,420
首先，项目委员会的工作就是是审查提议，
First of all,

181
00:12:42,421 --> 00:12:57,420
并且确保这是一个好的贡献，它符合编程标准、体系结构，它没有引入任何不必要的东西等等。
it's the job of the committee to review that proposed contribution and ensure it's good that it fits the programming standards that it fits the architecture that it doesn't introduce anything unwanted and so forth.

182
00:12:58,260 --> 00:13:01,650
这就是开源中的peer review。
So it's this peer review in open source.

183
00:13:01,651 --> 00:13:04,170
这也是项目质量的保证机制。
That's the main quality assurance mechanism.

184
00:13:06,390 --> 00:13:07,500
与此同时，
Also,

185
00:13:07,501 --> 00:13:13,320
码贡献者与项目committer之间的交互也促成了
this interaction between committers and contributors is a way of how computers grow

186
00:13:13,321 --> 00:13:16,770
代码贡献者成长为一个项目committer，
potential contributors to become committers,

187
00:13:16,771 --> 00:13:18,990
因为项目committer通常情况下是需要帮助的，
because committers usually actually want help,

188
00:13:18,991 --> 00:13:26,010
他们所需要的帮助就是简化目前committer的工作，
and the help they want is supposed to be good help meaning makes life easy for the existing committers.
 
189
00:13:26,011 --> 00:13:35,820
因为在项目committer与项目贡献者交互的过程中，项目committer要审核很多代码贡献，
Committers so in this interplay between committer and contributors as they are going over a proposed contribution in the interplay.

190
00:13:35,821 --> 00:13:45,720
项目committery要指导一个开发者如何成为优秀的项目贡献者，以及最后成为committer。
The committer also teach the contributors to become better developers for the specific project so that eventually a contributor might become a committer.

191
00:13:47,130 --> 00:13:47,640
所以你看，
So you see,

192
00:13:47,641 --> 00:13:54,600
在项目committer与项目贡献者之间就有两层或三层结构，
there's a lot going on in this interplay and in this simple two-step three-step hierarchy.

193
00:13:56,070 --> 00:14:01,470
并且因开发者角色和职位的不同可能会产生更详细的模型。
The more elaborate models of the different roles and positions that people have,

194
00:14:01,471 --> 00:14:05,640
我对于所展示的模型比较满意，其中包含用户、项目贡献者以及项目committer。
I contented still users, contributors and committers in the displayed model here.

195
00:14:06,660 --> 00:14:12,630
这就是众所周知的Onion模型，洋葱圈模型。
So the so called Onion Model,
which is quite well known.

197
00:14:12,631 --> 00:14:20,370
代码贡献者角色被划分在了代码贡献阶段，
contributor,
the contributor role has been split up into
increasing stages of contribution,

200
00:14:20,371 --> 00:14:21,840
进行项目中bug的修复工作，
reporting a bug as the

201
00:14:21,841 --> 00:14:33,540
下一层即是外围设备开发人员，最活跃的开发者就是项目的核心成员，
lowest run of onion peel bug fixe, the next one up Peripheral developer, Active developer, the next ones
until you become a core member,

203
00:14:33,541 --> 00:14:38,880
也就是说你或许经历了从项目贡献者到项目committer的转变。
which means you just switched from being a contributor to committer or were switched.

204
00:14:38,881 --> 00:14:42,600
并且最终你最终会成为核心成员和项目负责人。
Ah,
you become a core member and a project leader
in the end.

207
00:14:45,810 --> 00:14:56,490
另一种角度就是思考开源中的职位如何与经典的软件工程活动相关联？  
Another way of looking at it is how the positions in open source actually relate to the classic software engineering activities.
 
208
00:14:56,491 --> 00:15:00,660
我们从软件开发中获知，
We know from software development of software engineering processes.

209
00:15:02,280 --> 00:15:04,500
在传统的软件工程中，
In traditional software engineering,

210
00:15:04,501 --> 00:15:14,520
活动与工程中职员所扮演的角色具有明显的差别，这些职员可能软件测试人员，
there's a clear distinction between the activities and then people who play roles that conforms with these activities of being a software tester,

211
00:15:14,521 --> 00:15:23,250
软件开发者，工程经理、产品经理。这是四种核心角色。
A software developer,
an engineering manager and a product manager.
These are four core roles,

214
00:15:23,251 --> 00:15:29,370
在软件公司中一般会把这些职位一一对应起来。
and they usually mapped one-to-one onto people inside
companies who develop software,

216
00:15:29,371 --> 00:15:33,480
开源软件不仅仅是一个开源的软件。
Not open source software just software.
An open source,

218
00:15:33,481 --> 00:15:46,740
我们并没有很清晰地看到这些角色、职位间的一一对应关系，只是看到了对应的三个角色，
we really don't see these roles explicitly or mapped in a one-to-one fashion on two people rather we see they are mapped onto exactly the three roles of the three positions that I just introduced,

219
00:15:46,741 --> 00:15:53,550
这三个角色分别是软件用户、项目贡献者以及项目committer。每个人都是软件测试人员。
user, contributor and committer. Specifically everyone's a software tester.

220
00:15:53,551 --> 00:15:59,640
软件用户总是在进行测试，
The users obviously using the software are always testing the contributors, naturally testing it,

221
00:15:59,641 --> 00:16:00,960 
项目贡献者以及项目committer也是如此。
and so other committers.

222
00:16:02,520 --> 00:16:08,910
开发工作由项目贡献者以及项目committer完成，所以项目贡献者、committer也是软件开发人员。
The development work is only done by contributors and committers, so contributors and committers are the software developers.

223
00:16:10,980 --> 00:16:13,830
其中，项目committer作为项目核心人员，
And then the committers,
as core team members,

225
00:16:13,831 --> 00:16:21,810
他们还承担着工程管理或产品管理的角色。
they are also picking up the engineering management role or activity and the product management role.

226
00:16:21,811 --> 00:16:33,600
因此有时候因为不同的活动、工作实在是太多，
And hence the committer post is overloaded with these different activities,
项目的committer会有更高的地位，也会有更多的权利，
which makes them, puts them higher into the hierarchy,
giving them more authority,

229
00:16:33,601 --> 00:16:38,130
但是与此同时可能也是会有更多的疏忽。他们需要协调很多的项目。
more oversight,
and much more coordination activity that is due to them.

231
00:16:42,120 --> 00:16:53,820
在项目committer这个职位上，他们对于定义、执行项目的管理工作很重要。  
And in that position or post,
they become important for defining and enabling the governance of the project.

233
00:16:53,821 --> 00:17:03,630
概括来说，管理就是过程的集合，可以管理社区系统，其中社区中存在开源软件项目。
To recapitulate,
governance is the set of processes and so forth
to manage the social system which here is the open source software project.

236
00:17:04,680 --> 00:17:10,320
这基本上就是开源项目的运行方式。
And this is basically how an open source project is run.

237
00:17:10,321 --> 00:17:15,090 
我们会稍微了解一下这一块儿，但不会花太多时间。
We will look at that a little bit,
not too much again.

239
00:17:15,091 --> 00:17:23,160
我有完整的开源课程，不是这个，这个是关于商业开源的。
I have a whole full course on open source in general,
which is not this one.
This one's about commercial,
open source

243
00:17:23,161 --> 00:17:34,830
我知道有三种治理模式。我们先了解一下BDFL模式，其也被称为the benevolent dictator模式。  
   
specifically, the three governance models I think that are most widely known are called the BDFL model, the benevolent dictator for life model,

244
00:17:34,831 --> 00:17:38,580
它是由linux内核所普及的，
and it was popularized by the Linux kernel.

245
00:17:38,581 --> 00:17:49,230
现在有很多开源项目的存在，这些项目的构造以及人们的交互都是基于Linux内核的。
So many open source projects exist,
who have modeled their structure and the interaction of people on the based on the Linux kernel.

247
00:17:50,280 --> 00:18:05,250
这是一个层级结构，有3层，人们通常会向更高等级的汇报，更高等级的管理者要听取很多汇报。
It has a hierarchical structure in that people in a tree structure in a hierarchy report to a higher person that higher up person has multiple people reporting to them,

248
00:18:05,251 --> 00:18:08,250
以至于一个所有的这些都会聚集在一个点上，
and it all comes together at the single node,

249
00:18:08,251 --> 00:18:12,000
这就是Linux内核中的层次结构的根。
the root of the hierarchy in the Linux kernel.

250
00:18:12,001 --> 00:18:20,040
根结点会被Linus Torvads所占据，另一个项目中根节点就会是另一个人。
that would be that root node would be occupied by Linus Torvads.
But another projects it might be other people.

252
00:18:21,660 --> 00:18:32,370
接下来我们要介绍Peer Group模型，其是通过核心小组运行项目的发展。   
There's also the Peer Group model,
which
Makes development,
which runs development.
through a core group,

257
00:18:32,371 --> 00:18:43,170
这个核心团队中有committer也有布道者，团队中的人都是平等的。
the core team of committers and evangelists in such a core team in which people are equal
their peers.

259
00:18:43,171 --> 00:18:47,040
其中并不是每个人都必须是committer，
Not everyone has to be a committer many times it is

260
00:18:47,041 --> 00:18:51,240
一部分开发人员也可以是committer，也会有commit权利。
developers who are also committers and have commit rights.

261
00:18:51,241 --> 00:18:59,700
但是经常会有布道师或者其他不进行代码贡献的人会被认为是核心团队的一部分，
But there's always also the usual evangelist or other person who's not coding but considered part of the core team.

262
00:19:00,720 --> 00:19:06,030
比如PostgreSQL，一个关系数据库管理系统，
And an example for that is the PostgreSQL,
relational database management system.

264
00:19:07,650 --> 00:19:11,580
然后就是开源。从研究的角度来说，这是难以置信的。
And then open source,
which is fabulous from a research perspective,

266
00:19:11,581 --> 00:19:18,390
因为你所看到的一切东西都会存在于每个地方，
because everything goes, everything you can possibly dream up as a process exists somewhere,

267
00:19:18,391 --> 00:19:31,290
这就引申出了“民主”的概念，无论谁采取行动，谁都可以去做，
and then there's also what I call,
I think,
other have called it,
I just use the term here democracy
meaning
whoever jumped into action will get,
Ah,
will get the right to do it.

275
00:19:31,291 --> 00:19:34,200
这些人必须服从一定的规则。
Those who do rule,

276
00:19:34,201 --> 00:19:39,960
另一个例子就是Tiki,是wiki的一个CMS软件， 
and so an example would be the Tiki, wiki CMS Groupware software.

278
00:19:39,961 --> 00:19:44,730
如果你是讲道理的人，而我又是一个理性的人，那么我就会相信你，
If you're reasonable,
I appear to be reasonable,
you will be trusted,

281
00:19:44,731 --> 00:19:46,950
你立马就会得到committ的权利。
you get,
commit rights right away,

283
00:19:46,951 --> 00:19:50,820
只有当你的工作做的很烂的时候，你的工作会被退回，
and only if your work stinks,

284
00:19:50,821 --> 00:19:59,250
因为在你的代码被写入软件之前，是要确保质量的。
will be reverted rather than quantity rather than quality is assured before your work makes it into the software.

285
00:20:01,890 --> 00:20:12,660
所以开源给了我们探索商业的时间，
So open source to provide a little piece from our research here is
solidly commercial these days.

287
00:20:13,590 --> 00:20:19,920
我的意思是公司付钱，然后他们的开发者在开源软件组件上工作。
By that I mean that companies are paying their developers to work on open source software components.

288
00:20:20,760 --> 00:20:21,750
从这幅图里你看到了什么，这是一个古老的测量方法。  
What do you see here in

289
00:20:21,751 --> 00:20:25,110
this graphic, it's an old measurement of ours,

290
00:20:25,111 --> 00:20:31,980
我的研究小组作为一个整体处在开源之中，
my research group and each line is the activity in open source as a whole.

291
00:20:31,981 --> 00:20:36,480
我们拥有具有代表性的开源样本。
We had what we believe was representative sample of open source at the time.

292
00:20:37,380 --> 00:20:46,440
每一行对应者动作中的每一天，虚线以及红实线是周末，其他的各种颜色线条都对应着工作日。
And every line is one day of the week, with the dashed ones red dash 
two lines being the weakened and their last one being the weekdays,

294
00:20:46,441 --> 00:20:53,220
将其放在一天之中，并且不同地区还要校对时间。
and we normalize,
put it into a long  day around the world and aligning times zone and so forth.

296
00:20:53,221 --> 00:21:09,000
你可以看到三组人在工作，工作日工作时间为上午九点到下午五点的人一般是带薪开发者，
And you can see, three groups basically of people doing work. So that those people who do work nine to five of Monday through Friday and that would be paid developers to who

297
00:21:09,001 --> 00:21:10,800
对于他们而言，这是一份工作。
this is a job,
and that's it.

299
00:21:11,970 --> 00:21:16,470
还有一部分人，从周一到周五都在工作，
When you do see people who work Monday to Friday,

300
00:21:16,471 --> 00:21:22,020
工作时间为早上九点到下午五点，甚至周末的晚饭后还在工作，
nine to five, but also after dinner and on the weekends,

301
00:21:22,021 --> 00:21:26,520
那么他们就是为了薪资而狂热工作的人。
and these would be the enthusiasts who are paid for their work.
 
302
00:21:26,521 --> 00:21:28,860
是的，这些人是真的热爱这份工作，
Yes,
but there's love so much,

304
00:21:28,861 --> 00:21:34,830
周末他们还在工作，所以很好认出来他们。
they also work on it through the weekend and then you can recognize. Well,

305
00:21:34,831 --> 00:21:39,270
从数据中我们还能找到第三类工作者，  
I tell you we found the data,

306
00:21:39,271 --> 00:21:44,400
他们纯粹是志愿者，没有薪资，他们通常周末还在工作。
the third category of pure volunteers who are not paid for their work but who do the work on the weekend.

307
00:21:44,401 --> 00:21:47,820
所以你可以看到工作表中周末还是有很多工作活动的。
So yeah,
that's why you actually also see a lot of activity on the weekend.

309
00:21:49,320 --> 00:21:57,870
你可能想知道为什么公司要付钱给员工？为什么会有这么多的参与？
And you may wonder now,
why do companies pay people?
How can there be so much activity?

312
00:21:57,871 --> 00:21:59,730
它怎样才能占据主导地位呢？
How can it be dominant?

313
00:21:59,731 --> 00:22:02,670
这些工作在周一到周五进行，工作时间为上午九点到下午五点。
That work is being done Monday to Friday,

314
00:22:02,671 --> 00:22:09,030
这些公司浪费资源，还花钱。
nine to five. And these companies wasting resources giving away money,

315
00:22:09,031 --> 00:22:13,290
而有的开发者不要薪资，他们只是单纯地为开源做贡献。
the developer salary for free because they're contributing to open source.

316
00:22:14,700 --> 00:22:20,220
那么这就提出了一个问题，开源是如何实现可持续发展的？
And that raises the question how has open source become sustainable?

317
00:22:21,300 --> 00:22:25,980
开源某种程度上其实也算是一种商业，   
And it can only be that somehow commercial,

318
00:22:25,981 --> 00:22:29,340
是一种长期运行，自给自足的商业活动，
long running self-sustained commercial activity,

319
00:22:31,170 --> 00:22:35,820
从而促使公司支持开源并实现了可持续发展。
has led companies to support open source so that it has achieved that sustainability.

320
00:22:42,360 --> 00:22:49,620
所以我们要正视开源现象。
And that puts us squarely onto the phenomenon of open source software foundations.

321
00:22:51,090 --> 00:23:00,600
开源软件基金会open source software foundation是非盈利组织，有时被称为基金会或联盟。
So an open source software foundation is a nonprofit organization sometimes called a foundation or a consortium.

322
00:23:00,601 --> 00:23:03,960
这都只是同一称呼的不同变体，
These are different variations on the same topic,

323
00:23:03,961 --> 00:23:10,530
它的目的是管理和指导开源软件的开发，
which has the purpose to manage and perform the development of open source software,

324
00:23:10,531 --> 00:23:17,670
因此这是一种“无差异”的方式，没有人可以获得竞争优势。
which is comparatively non-differentiating meaning nobody gains a competitive advantage.

325
00:23:17,671 --> 00:23:20,220
否则，这就不是开源软件了。
Otherwise,
you really couldn't make it open
source softwares

328
00:23:21,240 --> 00:23:26,520
开源软件针对基金会成员以及公众是可获得的，
And that software is being made available to foundation members and the general public.

329
00:23:27,600 --> 00:23:35,160
所以开源软件基金会就是开源软件的宿主。
So an open source software foundation make sure that there's a home for open source software.

330
00:23:36,270 --> 00:23:40,980
所有人都可以使用该开源软件，这是由开源许可所规定的。
Available to all by way and that's regulated by way of the open source license.

331
00:23:42,480 --> 00:23:45,300
因为大家都是相互协作，  
And because everyone collaborates,

332
00:23:45,301 --> 00:23:47,310
所以没有人有竞争优势。
nobody has a competitive advantage,

333
00:23:47,311 --> 00:23:57,900
所以没有人可以主导基础设施组件，也没有人可以获得竞争优势。
so it's infrastructure components that nobody can dominate and gain some competitive differentiation from.

334
00:24:00,540 --> 00:24:13,170
开发者基金会的成员以及开源基金会的成员都是独立的开发者、软件供应商。
Typical members of a developer foundation, typical members of
open source foundations are individual developers, software vendors,

336
00:24:13,171 --> 00:24:21,960
这都是IT行业，商业咨询公司的主要参与者，
So it's the players of the 
IT 
industry,
also service providers consulting firms,

340
00:24:21,961 --> 00:24:28,920
其中也还有非软件行业的用户。
but also then those from outside the IT industry in the software industry software users.

341
00:24:28,921 --> 00:24:41,220
你会看到，基金会的不同成员会引导不同类型的基金会。
And,
as you will see,
actually in a bit. These all, these different members of a foundation lead to different and lead to different types of foundations.

344
00:24:42,210 --> 00:24:46,080
在这里，我将笼统地谈论一下开源基金会，  
Here I'm still talking about open source foundations in general.

345
00:24:46,081 --> 00:24:47,250
所以为什么这些组织会存在呢？
so why do they exist?

346
00:24:47,251 --> 00:24:48,720
你为什么需要基金会？
Why would you need a foundation?

347
00:24:48,721 --> 00:24:57,660
你为什么不能在网上寻找开源软件许可以及协作者呢？
Can't you just go on with some place on the web and open source license and people who like to collaborate?

348
00:24:57,661 --> 00:25:00,600
不，在某些时候这些还是不够的。
No,
that was not enough at some point of time.

350
00:25:00,601 --> 00:25:14,040
你需要非盈利组织，因为有时候你需要同时支持与保护软件开发者。
you needed that
non-profit organization because you wanted to both
support and protect the people who are developing the open source software,

353
00:25:14,041 --> 00:25:23,220
需要确保哪怕这些开发者遇到了什么问题，软件也需要继续运行下去。
as well as ensure that if something happens to these people.
The software would continue to go on.

355
00:25:23,221 --> 00:25:27,180
所以有些时候你需要保护这些人。如果某件事出错了，
So you need to protect the people because say,
if something's wrong,

357
00:25:27,181 --> 00:25:39,930
用户还用着软件，用户可能被起诉，然后这些开发者就会失去开发兴趣，但是公司都是需要开源的。
and there was the software and then the people get sued then they might lose interest in developing the open source software, but too many companies wanted that open source software.

358
00:25:39,931 --> 00:25:45,900
所以开源基金会介于两者中间，可以保护开发者，   
So the open source foundation is that go in between and protects the developers,

359
00:25:45,901 --> 00:25:54,150
即是这些开发者成为了项目的起诉对象，
the individual people from lawsuits by the foundation itself becoming the potential target of lawsuits.

360
00:25:54,151 --> 00:26:00,990
这些开发者依然可以代表项目的利益。
and then the inverse is also true, to represent the interests of the project.

361
00:26:00,991 --> 00:26:04,380
但是你也不不是希望每个人都采取行动，
You don't want the individual people to have to act,

362
00:26:04,381 --> 00:26:08,310
举个例子，看到某人滥用商标。
for example,
sue someone for abuse of trademarks.

364
00:26:08,311 --> 00:26:20,070
此外，如果某人采用不当方式使用了图标，你或许想让基金会走上法庭去争取权益。
Rather,
you want the foundation to go to court.
If someone uses a project's
logo in wrong ways does not comply with the trademark rules and so forth.

368
00:26:22,830 --> 00:26:33,570
此外，那些使用开源软件的用户也是意识到了软件的商业重要性， 
In addition,
those who
use the open source software,
realized its commercially important to them,

372
00:26:33,571 --> 00:26:36,960
因为这个开源软件可能是产品的重要组成部分。
because maybe it's important components in their products.

373
00:26:38,070 --> 00:26:43,590
那些用户使用了软件，还依赖了这个软件。
Those used the software, wanted to ensure
Or depend on the software.

375
00:26:43,591 --> 00:27:02,910
然后他们向确保这个依赖关系能够被正确管理，担心某些人将软件引向了不正确的方向。
I wanted to ensure that this dependency is properly managed and that,
in particular, nobody
could start owning the software and turn the software in direction not suitable for those who depend on it.

378
00:27:02,911 --> 00:27:09,390
还记得我上次所讲述的控制机制吗？ 如果有人能够牢牢控制这个软件，
Remember the control mechanisms that I talked about last time,

379
00:27:09,391 --> 00:27:22,170
并且能够利用这些控制机制，那么他们就可以将软件从正在使用它的人和无权的人手中夺走。
if someone were able to gain a strong hold on the software and was able to utilize these control mechanisms and they could turn the software away from those who are using it and who are not in power.

380
00:27:22,171 --> 00:27:29,250
如果你的产品依赖于这些开源组件，那么你肯定不希望发生这种事。   
And definitely,
if your product depends on these open source components,
then you don't want that to happen

383
00:27:29,251 --> 00:27:35,310
所以你需要一个明确的知识产权规则以及代码版权，
So you needed a clear rules for the intellectual property,
the copyright to the code.

385
00:27:35,311 --> 00:27:39,960
需要明确的规则，比如谁可以进入市场？市场如何发展？
you want clear rules and who gets to market and how does it get to,

386
00:27:39,961 --> 00:27:47,370
市场如何管理？谁可以使用商标呢？诸如此类的规则。
how is it marketed, this component who may use the trademarks of the logos and so forth.

387
00:27:47,371 --> 00:27:54,570
所以我们将讨论软件如何被进一步发展呢？
All the way to influencing or have a way to have a say in how the software will be developed further.

388
00:27:57,150 --> 00:28:05,430
举一个开源基金会的例子，我认为这是一个社区所领导的基金会，
And so one example of an open source foundation,
I argue it's a community-led foundation as a special purpose.

390
00:28:05,431 --> 00:28:11,550
但最初的开源软件基金会之一就是Apache Software Foundation，
But one of the original open source software foundations is the Apache Software Foundation

391
00:28:11,551 --> 00:28:20,610
刚才我也阐述了为什么要有开源软件基金会的原因。
Who spells out the motivation that I just gave as a main motivation for having such foundation.

392
00:28:20,611 --> 00:28:29,310
这个基金会为知识产权建立了一个框架，并且也限制了相关的代码贡献者，
They said they provide an established framework for the intellectual property, the open source projects limit contributors,

393
00:28:29,311 --> 00:28:34,770
因为这些代码贡献者可能面临着潜在的法律风险，他们可能会被起诉。
potential legal exposures because they might get sued over bags,

394
00:28:34,771 --> 00:28:42,810
这个基金会也为开发人员提供一个接受财政捐助来运行一些基础设施的地方。
provide a place to accept financial contributions to run some infrastructure
for the development
and so forth.

397
00:28:45,360 --> 00:28:51,690
开源基金会的引入扩展了这条道路，   
And the introduction of open source foundations extended the path,

398
00:28:51,691 --> 00:29:02,250
最初就是用户、项目贡献者以及项目committer的职业道路，
a career path from the original user contributor,
Commmitter, tripod to 

400
00:29:02,251 --> 00:29:20,790
这涉及了六个步骤，其中包含从committer到PMC成员，之后PMC领导，最终基金会成员。
these this six step of where you can become a so-called project management committee member, PMC member after you were already a committer and then you might become a PMC leader and eventually even the foundation member.

401
00:29:20,791 --> 00:29:26,310
所以这些额外的角色是非常重要的。
So this additional roles are quite important.

402
00:29:26,311 --> 00:29:32,850
它们与开源项目是孪生的关系。
and they emerged because open source projects came together.

403
00:29:32,851 --> 00:29:34,590
如果你有一个孤立的开源项目，
If you have a single,

404
00:29:34,591 --> 00:29:42,120
然后你可能需要一个项目用户、项目贡献者以及项目commtter的角色。
isolated open source project,
then you only need user contributor and committer roles.

406
00:29:42,121 --> 00:29:45,210
PostgreSQL数据库也面临着类似的处境，虽然该项目并不是孤立的，  
So the PostgreSQL database,
it's not isolated,

408
00:29:45,211 --> 00:29:47,520
但是它是一个独立的项目。
but it's a standalone project,

409
00:29:47,521 --> 00:29:50,040
因此它非常需要项目用户、项目贡献者以及项目committer的角色。
and hence it has the user contributor,

410
00:29:50,041 --> 00:29:53,970
在Apache Software Foundation中，
committer role. Now in the Apache Software Foundation,

411
00:29:53,971 --> 00:29:57,660
很多开发者以及创始人意识到他们的项目是在是要多了，
What happened is that developers,

412
00:29:57,661 --> 00:30:17,520
因为一个项目了可能衍生出多个项目，项目很多以至于他们是在进行一整个平台的开发。
the founders realized that they had more than one project under their roof, they actually had multiple and the existing projects kept spawning more projects so that arguably what was happening was the creation of a whole platform,

413
00:30:17,521 --> 00:30:28,920
就像Apache Software Foundation在整个基础设施层所面临的处境一样。
a whole infrastructure layer in the case of the Apache Software Foundation for the web.

414
00:30:24,511 --> 00:30:26,940
Apache Web server是这样，Hadoop也是这样。
So it's the Apache Web server,
but it's also Hadoop.

416
00:30:28,921 --> 00:30:32,880
就像Hadoop通常与数据流处理组件Spark和flink联系在一起，   
It's also all the data streaming spark and flink.

417
00:30:32,881 --> 00:30:39,090
其实全部重要的项目都有相关的衍生项目，
These are
all important projects with many other offspring,

419
00:30:39,091 --> 00:30:45,450
有的项目还需要跨项目协调。
or resulting projects that all needed coordination across projects.

420
00:30:45,451 --> 00:30:51,450
我觉得就项目本身来说，项目组件应该被好好管理。
And well first of all the project itself, the individual component needed better management.

421
00:30:51,451 --> 00:30:57,840
然后它需要跨多个组件的协调，这些组件需要协调工作。
And then it needed coordination across multiple components that were supposed to work together

422
00:30:57,841 --> 00:31:05,160
Hadoop包含hadoop组件也包含hadoop文件系统，还有其他的一些组件。
Hadoop has.
The core Hadoop has the Hadoop file system, has many other components that need coordination.

424
00:31:05,161 --> 00:31:12,630
那么，这就是项目管理委员会被创建的原因。
So then,
that's why project management committees were invented.

426
00:31:12,631 --> 00:31:24,810
如果你是项目的committer，你需要规划项目的走向，
If you were a committer and you were actively looking towards
charting the direction of the project.

428
00:31:24,811 --> 00:31:29,490
这样的话你就得和其他项目的人交流。
But then you would have to talk to others of related projects.

429
00:31:29,491 --> 00:31:34,650
然后你可能会成为项目管理委员会的成员，   
Then ah,
you could become a member of the project management committee,

431
00:31:34,651 --> 00:31:44,490
你的工作将从committ这一工作扩展为审查别人的代码然后接受这段代码，
which would expand
your committed job from
reviewing other peoples' code as a committer and accepting it,

434
00:31:44,491 --> 00:31:50,610
并引导项目使之符合项目的发展方向，
committing it to really charting the roadmap and the path of the project,

435
00:31:50,611 --> 00:31:53,370
其中可能包含和其他组件沟通交流，
including talking to other components,

436
00:31:53,371 --> 00:32:02,160
需求确保个组件正常工作并符合开源项目的路线图，还要保证这些组件能够协调工作。
making sure the roadmaps across component worked out, work together well and so forth.

437
00:32:02,161 --> 00:32:14,640
这就需要项目管理委员会中有很多成员，因为一个特定的项目可能有多个发展方向。
And that meant there were multiple people quickly in a project management committee because context of the particular project went in multiple directions.

438
00:32:14,641 --> 00:32:21,030
所以你希望更多的人成为项目的协调者，
So you probably wanted more than one person to be the coordinator with the other projects,

439
00:32:21,031 --> 00:32:26,850
这意味着必须要有项目管理委员会的领导，
and that meant that there would have to be a leader of the project management committee,

440
00:32:26,851 --> 00:32:29,430
这是一个全面的监督机构。这个基金会至少是同行中的领导者，可以引导行业平台的正确发展。
which had total oversight,

441
00:32:29,431 --> 00:32:47,760
Apache Software Foundation引入人员成为基金会成员，可能成为项目管理委员会领导者。
or at least was a peer leader among peers, who really helped steer the industry platform and so forth.  And the Apache Software Foundation introduce the idea of individual people being foundation members past being Project management Committee leaders,

442
00:32:47,761 --> 00:32:59,820
所以教练的技术工作就是对Apache软件项目进行指导和管理，  
So past the technical work to become coaches for the next generation of technical and managerial leaders in Apache software projects.

443
00:32:59,821 --> 00:33:02,970
所以此处展示了一连串的步骤。
So I show it here as
if it's a succession of steps,

445
00:33:02,971 --> 00:33:12,420
你也不必许是其中的用户，项目贡献者，项目committer以及PMC成员，PMC领导以及基金会成员。
It doesn't have to be that you do one two three,
user contributor, committer for five and six, PMC member, PMC
leader and foundation member.

448
00:33:12,421 --> 00:33:21,210
如果你是一个值得信任的项目共享者，一个活跃的项目成员，
You could possibly skipped some as an individual person and by being a trusted contributor,
an active member.

450
00:33:21,211 --> 00:33:24,120
那么你可能直接就成为一个基金会成员。
you could become a foundation member as well.

451
00:33:24,121 --> 00:33:32,040
但是通常为了了解一个基金会是如何工作的，你也会经历这些步骤和阶段。
But usually to understand how a foundation works,
You would go through these different steps and stages.

453
00:33:32,041 --> 00:33:35,100
你基本上是在学习基金会的工作流程。
You are basically learning on the job of how,

454
00:33:36,240 --> 00:33:38,610
在这种情况下，比如我所举例子中的补丁工作，
in this case,
the patch in my example
right now,

457
00:33:38,611 --> 00:33:40,470
这也是Apache software foundation在做的一件事情。
the Apache software foundation worked.

458
00:33:42,120 --> 00:33:47,940
现在这些职位都很重要，甚至在商业上也是很重要的，  
Now then,
these positions are quite important,
even commercially important,

461
00:33:47,941 --> 00:33:55,110
但是我会为了开发者职业生涯重新审视这些后果。
but I will revisit the consequences
for developer career, careers at some other point in time.

463
00:33:57,930 --> 00:33:59,040
然后再一次
And then again,

464
00:33:59,041 --> 00:34:13,170
然后我们需要再一次认识到开源基金获解决可很多问题，如果社区成员中有人心怀不轨，
it's important to realize how open source foundations solve some of the problems that if there was a bad faith act or simply someone who wanted to take control of some open source project,

465
00:34:13,171 --> 00:34:16,980
那基金会如何处理这些问题呢？
how the foundation would resolve these potential issues?

466
00:34:16,981 --> 00:34:29,250
基本上，他们会防止任何人能够控制这些瓶颈，而控制的方式就是对这些瓶颈施以积极主动的关注。  
Basically,
they would prevent that anyone could get a hold of these choke points to exert control and the way to do it is well to be proactive about it.

468
00:34:29,251 --> 00:34:33,990
举个例子，并不是每个基金会都会像开源基金会这样去做，
So,
for example,
and open source foundation,
Not everyone does it like this,

472
00:34:33,991 --> 00:34:41,880
但是任何基金会参与贡献可能都需要版权的转让，
But could require a transfer of copyright for any contribution to the foundation,

473
00:34:41,881 --> 00:34:51,120
否则就会争论谁将管理基金会。然后就会产生分歧，
and then it would be possibly a struggle about who manages the foundation,
but that would be different from who,

475
00:34:51,121 --> 00:35:01,440
谁将管控基金会呢？
who runs the project and then the struggle would be set and a potential struggle for power would have to be settled by way of bylaws and eventually,
possibly even courts.

477
00:35:01,441 --> 00:35:13,920
然后基金会可能获得了版权，这样就没有人能够获得开源项目的“排他权”。
So the foundations require the copyrights and that way nobody can quietly gained that exclusion right granted by copyright to the open source projects.

478
00:35:17,790 --> 00:35:25,350
然后就是开源项目相关的专利，软件许可的需要正确选择专利的正确授权，  
And then patent rights,
the right choice of a license implies the patent grants so the Apache software foundation,

480
00:35:25,351 --> 00:35:29,400
所以Apache software foundation中Apache软件许可2.0版本包含了专利的授予，
the Apache software license 2.0 includes a patent grant,

481
00:35:29,401 --> 00:35:34,800
这就意味着你不会遇到任何可能潜在的有关专利的诉讼。
and that means you will be unencumbered by any potential patent litigation.

482
00:35:34,801 --> 00:35:42,600
如果有必要可以可以从friend原则来进行相关专利权的获取，但是这种做法还是比较少见的。
Um,
if there are necessarily grants on patent usage they could use from the friend principle
so that is uncommon.

485
00:35:42,601 --> 00:35:49,560
总体来说开源是拒绝软件专利、商标权这类权限的，
Open source strongly rejects and in general software patents as an idea.
Trademark rights,

487
00:35:49,561 --> 00:36:03,390
是如果商标权对于每个人都可获得，并且开源基金会以一种“非歧视”的原则允许每个用户使用商标，
same thing the Open Source Foundation collects, the trademarks defines ways of using what's acceptable in terms of using the trademarks for everyone in a nondiscriminatory way.

488
00:36:03,391 --> 00:36:12,030
那么就没人能控制得住这种局面。域名和网站也是如此。
And that way nobody can exert control that way.
As well and domain names
websites are the same thing.

491
00:36:12,031 --> 00:36:20,370
所以所有这些相关的权限都由开源基金会所掌控，基金会统一做出决定。  
All under the roof of a foundation ensures that it's the foundation who makes decisions and that there's recourse if someone doesn't agree.

492
00:36:22,470 --> 00:36:31,740
如果他们不喜欢这个项目的话，基金会也可以叫停冲突的项目，基金会确实也有这个权利。
Foundations can also
cut into project strife, they don't like it,
but they do have the power.

495
00:36:31,741 --> 00:36:38,820
如果一个社区的领导者，也是一个社区的committer对一个开源项目表现糟糕，
If the social leader,
a committer often an open source project is badly misbehaving,

497
00:36:38,821 --> 00:36:40,920
那么基金会可以把这个committer解雇。
they can kick them out.

498
00:36:40,921 --> 00:36:46,140
再次强调一下，这种情况不太可能发生，因为这需要项目的committer表现得非常糟糕才行，
Ah again,
it's highly unlikely this happens and so it needs to be really bad,

500
00:36:46,141 --> 00:36:46,710
但是这种情况也确实是存在的，因为这可以让项目的committer了解一旦工作糟糕就会被解雇掉，
but,

501
00:36:47,640 --> 00:37:03,030
这样可以让社区的committer保持理智并能够好好工作。
that option is there and arguably knowing that misbehavior might get you fired or removed from committed status already keeps people reasonable and somewhat in line.

502
00:37:09,480 --> 00:37:12,720
总的来说，我谈到了开源基金会，
So I talked about Open Source foundation, in general,

503
00:37:12,721 --> 00:37:26,430
这对于理解不同类型不同种类的动机是有帮助的，因为它们可能会造成工作的略微差异。
I think it's helpful to understand that there are three different types, somewhat different motivations and they tick or work slightly differently.

504
00:37:26,431 --> 00:37:37,710
如果你管理着公司，并且你很关注工作最终的输出，那么你需要理解工作动机以及工作表现的差异， 
If you are a company,
you need to understand these differences in motivation and behavior if you want to,
if you depend on the output,

507
00:37:37,711 --> 00:37:42,030
这些工作可能是对于某些基金会项目中开源组件的开发。
meaning the open source components developed in projects of these foundations.

508
00:37:43,290 --> 00:37:46,920
第一个就是社区所主导的开源基金会，
So the first one are the community led open source foundations.

509
00:37:46,921 --> 00:37:54,720
那么自然会有些人处于领导地位。
These are for a natural people in the lead.

510
00:37:54,721 --> 00:38:09,270
这种情况下，这些基金会选择基金会成员，这些人不会从公司中选择。
In some cases, these foundations or offer these foundations,
except only natural people,
So not legal persons,
not legal people, 
not companies.
They don't accept those as members,

516
00:38:09,271 --> 00:38:17,250
再举一个Apache Software Foundation的例子，这就是所谓的ASF。  这这种情况与供应商所主导的基金会完全不同，vendor-led foundation也是一个开源基金会。
only national people and again the main example for me is
the Apache Software Foundation,
it's only the ASF.

519
00:38:17,251 --> 00:38:29,670
它们只接受正常的自然人作为基金会成员的领导人，而不允许公司加入。
only accepts normal natural people as leaders, as members of the foundation and keeps companies at least formally out.

520
00:38:29,671 --> 00:38:34,290
是因为，如果人们受雇于公司，那么就可能会导致利益的冲突。
Of course,
people are employed by companies,
and that might lead to conflicts of interest.

523
00:38:34,291 --> 00:38:51,000
这这种情况与供应商所主导的基金会完全不同，vendor-led foundation也是一个开源基金会。
but formally companies have no say in the ASF.
This is quite different in vendor led foundations.
The vendor-led
foundation is an open source foundation.

527
00:38:51,001 --> 00:38:58,470
其定义就是软件供应商所主导的基金会，那么显然开源软件供应商是一个法律的实体，   
In my definition,
which is predominantly led by software vendors,
so obviously then software vendors,
the legal entity,

531
00:38:58,471 --> 00:39:00,600
那么公司就可以变成该基金会中的成员，
the company can become a member,

532
00:39:02,010 --> 00:39:10,650
基金会的领导下成员可能会参与基金会、项目的不同方向，
and has race as an explicit member of influencing the direction of the foundation and the projects under its roof.

533
00:39:11,580 --> 00:39:19,710
在最为人所熟知的例子莫过于Linux Foundation和OpenStack Foundation。
So the most well-known example is probably the Linux Foundation, OpenStack Foundation.

534
00:39:19,711 --> 00:39:25,620
其中有很多显然就是软件供应商，
Many others where there is clearly software vendors,

535
00:39:25,621 --> 00:39:32,490
公司有主导权。但是这并不意味着这是一个糟糕的基金会。
companies leading the charge.
This doesn't mean it's a bad foundation or anything.

537
00:39:32,491 --> 00:39:39,810
举个例子，eclipse foundation也是接受合法的自然人的。
For example,
the eclipse foundation accepts next to natural people,
also legal people.

540
00:39:39,811 --> 00:39:53,520
除了eclipse foundation之外，其他的很多公司也是追逐成员利益的组织。   
Many companies again and the eclipse foundation even used to be not any longer but used to be a
meaning consortium for member benefit organization,

543
00:39:53,521 --> 00:40:06,090
这有点儿类似Apache Software Foundation，它也是为了开源项目的利益，
but it really acted like,
ah,
like the Apache Software Foundation,
like it,
it was acting solely in the interest of the open source projects,

548
00:40:06,091 --> 00:40:11,370 
就像某些公司关注自己的利益那样。
even though companies which are naturally interested in their own profit.

549
00:40:11,371 --> 00:40:18,060
eclipse foundation过去是这样的成员，该基金会要收取会员费用，
Ah,
are and were, were and are a member.
Well,
they do bring in our membership fees,

553
00:40:18,061 --> 00:40:23,430
这对于运行这些供应商所主导的基金会很重要。
and that's of course important for the operations of these vendor-led
foundations.

555
00:40:24,840 --> 00:40:35,220
因为此类基金会可能会受到第三方的影响。
When the led foundations came into being because there's a third group of
motivating factors or reasons to have a foundation.

557
00:40:36,900 --> 00:40:45,630
我们之前已经讨论过了要去创建公平、平等的竞争环境，  
And we already discussed the first to support and protect people and created fair,
equal playing field.

559
00:40:47,280 --> 00:40:53,460
但是开源基金会特别是规模较大的开源基金会也一直在做这件事情。
But open source foundations,
in particular, the large open source foundations
were also created.

562
00:40:54,840 --> 00:41:05,610
为了确保创造一个更加强壮更加有竞争了的开源软件系统来对抗软件垄断者以及一些强劲的软件行业成员。
To ensure or create,
a stronger,
more competitive ecosystem against established monopolist,
Or established strong players.

566
00:41:06,480 --> 00:41:16,620
因此Linux Foundation成立了，其用于对抗Microsoft的Windows系统。
So the Linux Foundation was created to build up Linux as a competition to Microsoft
Windows for short.

568
00:41:17,910 --> 00:41:35,910
那么为什么要创建Linux Foundation呢？这样开源供应商就能从消费者身上赚更多的钱吗？
So how and why?
Well, using open source vendors who built on open source could get more money from customers,
they could.
Price more flexibly and reach more price sensitive customers and,

572
00:41:35,911 --> 00:41:40,110
其实这是为了发展软件生态系统，并且发展市场。 
of course,
grow the ecosystem and thereby grow their addressable market.

574
00:41:40,111 --> 00:41:48,690
举个例子，即如果从消费者身上赚取更多的钱？其实消费者的钱包就是预算。
I'm picking one here the how to increase your share of a customer wallet example.
Customer wallet is the budget.

576
00:41:48,691 --> 00:41:53,160
这就意味着某些公司可以把这部分预算花费在IT部门。
That means a budget that some company can spend on IT.

577
00:41:53,161 --> 00:41:58,380
如果你管理着一家银行，那么你就有钱投入到IT相关的技术方案中，
so you're a bank.
You have so and so much money to spend on your IT solutions,

579
00:41:58,381 --> 00:42:03,990
其实归根到底就是这部分钱到了另一家公司手里，然后这部分钱又会经过流转到另一家公司手里。
and some of that money goes to this company and some of that goes to another company and so forth.

580
00:42:03,991 --> 00:42:05,190
如果你是一个软件供应商，
If you're a vendor,

581
00:42:05,191 --> 00:42:11,160
你可能想从银行拿到更多的钱。
you want to get as large a percentage of that banks budget for item as you can.

582
00:42:12,450 --> 00:42:16,920
所以说开源还是很重要的，在左边你可以看到一个例子。
An open source is important here, on the left you see
this is an illustration.

584
00:42:16,921 --> 00:42:19,950
现实中情况可能会更复杂一些，但是这个想法还是蛮清楚的。
Reality is always more complex,
but the idea is clear here.

586
00:42:19,951 --> 00:42:26,190
在左边你可以看到两个相互竞争的软件供应商，
On the left you see two competing vendors,

587
00:42:26,191 --> 00:42:32,580
一个在销售自己的产品，另一个则在销售自己的平台。
one which sells the product at the top and one which sells the platform,

588
00:42:32,581 --> 00:42:38,910
举个例子，如果该产品供应商的某些组件依赖于另一家工具供应商，或许该工具供应商也很强大。 
for example,
or some component of the product depends on some tool vendors,
and maybe they are equally strong.

591
00:42:38,911 --> 00:42:44,550
那么两者可能会对收入对半分成。
So both get the same percentage.
of the customer's wallet.

594
00:42:46,020 --> 00:42:58,380
现在如果产品供应商可有一种更便宜的替代方案可以替换闭源组件，
Now,
if the vendor behind the product on top was only able to replace the closed source component at the bottom.
With a cheaper alternative,

597
00:42:58,381 --> 00:43:07,260
比如说这个更便宜的替代方案可能是一个开源解决方案， 那么该闭源组件对这个产品的影响作用就会减弱，
for example,
an open source alternative,
then the power of that closed source component vendor,
would vain or

601
00:43:07,261 --> 00:43:15,270
为现在产品供应商已经有了更好的选择，是可行的开源方案。
would get diminished because there's now an alternative and hopefully a viable open source alternative,

602
00:43:15,271 --> 00:43:24,780
因这样的话顾客的花费就会降低，与此同时产品供应商对于产品进行定价的灵活性就会降低。
and then the cost of that would go down and then the pricing flexibility or who acquires what of the customer's wallet.

603
00:43:24,781 --> 00:43:38,460
那么软件供应商会得到什么呢？我在这里讲一下，开源组件会实现游走。  
What go up for the vendor on top?
I'll illustrate this here,
by a shift from the left without open source to a shift to the right with open source. And in the right situation,

606
00:43:38,461 --> 00:43:48,990
在右边的情况中，中间的产品供应商将解决方案、产品卖给了顾客，
the vendor of the product in the middle
now sold to a customer,
their solution,
their product,

610
00:43:48,991 --> 00:43:50,880
当然这都是建立在开源组件之上的。
on top of an open source component.

611
00:43:52,020 --> 00:43:59,010
因为开源组件花费更加低廉，所以消费者就会省很多钱。
And then because that open source components is cheaper,
there's suddenly money left in the customer's wallet.

613
00:43:59,011 --> 00:44:07,170
但是客户钱包中所剩余的这部分钱也可能会被产品供应商所赚取，
That may be the vendor of the product could acquire
by upselling
the customer,

616
00:44:07,171 --> 00:44:08,490
比如产品供应商可以进行深度推销，创新销售模式，可以对消费者进行交叉销售。
selling new models,

617
00:44:08,491 --> 00:44:14,820
这样产品供应商对于价格的制定、修改则就有了更多的权利，那么销售也会变得简单一些。  
cross-selling whatever. It just has more power to price more highly,
or it can simply sell more.

619
00:44:15,960 --> 00:44:28,230
从左到右，软件供应商必须削减闭源组件供应商的影响力，
In order to go from the left to the right,
the product vendor has to help
diminish the power of the closed source component vendor,

622
00:44:28,231 --> 00:44:30,630
这意味着软件供应商必须投资开源。
and that means they have to invest in open source.

623
00:44:30,631 --> 00:44:35,820
以可以想象左边是SAP产品，以及闭源组件提供商比如Microsoft的Windows系统。
So think about the product as SAP on the left and the closed source component providers

624
00:44:35,821 --> 00:44:43,650
所以SAP的商业组件以及Microsoft的Windows系统都是由顾客买卖的，
Microsofts Windows. Then SAP's business suite and Microsoft Windows
would have to be sold and bought by a customer.

626
00:44:43,651 --> 00:44:55,860
如果说SAP仅能在Linux上运行，那么Windows将不会为顾客所需要。
But if SAP could only run properly on Linux and Windows was not needed by customers,
then SAP could sell its business suite running on top of Linux to customers.

628 
00:44:55,861 --> 00:45:02,250
这样SAP就可以把商业组件卖给消费者，这样SAP就更具有定价的灵活性了，
and that would give them more pricing
flexibility and ultimately a higher share of the customer's wallet,

630
00:45:02,251 --> 00:45:06,510
这样就能赚更多的钱。
A bigger part of their budget and thereby higher revenues.

631
00:45:06,511 --> 00:45:08,640
这就是为什么软件供应商为什么会被占据主导地位的垄断者所压榨，  
And that is why

632
00:45:10,590 --> 00:45:23,520
可能是是在技术领域也可能是是在产品解决方案领域。
software vendors whose margin gets squeezed by dominant monopolists in the technology stack and in the solution stack that customers buy.

633
00:45:23,521 --> 00:45:27,300
这就是为什么今天这些软件供应商会收到垄断者的支配，
That's why today,
these vendors,

635
00:45:27,301 --> 00:45:50,970
这也促使他们去成立开源基金会以此来发展开源可替代方案，然后看来对抗垄断者。
who realize they are increasingly at the mercy of some budding monopolist gang up on that monopolist, gang up on the 800 pound gorilla by forming open source foundations that develop a viable open source alternative to the monopolist's contribution to the product solution stack.

636
00:45:50,971 --> 00:45:55,920
这也许可以解释Microsoft Windows为什么会促成了Linux Foundation的成立？
That's why Microsoft Windows led to the creation of the Linux Foundation,

637
00:45:57,000 --> 00:46:06,990
 Intel在硬件领域被Microsoft所挤压，SAP与Oracle也被windows所压榨，例子很多。
Intel on the hardware level was getting squeezed by window by Microsoft and SAP and Oracle were getting squeezed by windows and so forth,

638
00:46:06,991 --> 00:46:13,800
所以这些软件供应商需要一个可替代方案来对抗windows以及Microsoft，
so they needed to be able to have an alternative to windows to keep Microsoft and check.

639
00:46:13,801 --> 00:46:17,670
所以这些软件供应商对Linux进行了投资。
And so they invested into Linux 
as an operating system.

641
00:46:19,110 --> 00:46:28,230
同样的情况也发生在Visual Studio,Visual Studio急需主导市场，
Later,
same thing happened with Visual Studio threatening to dominate development,

643
00:46:28,231 --> 00:46:40,320
因此IBM开始建立eclipse基金会，以保持Java生态系统的强大，
and hence IBM started the eclipse foundation to keep the Java ecosystem strong and to avoid that all developers got locked in, into Microsoft development software

644
00:46:40,321 --> 00:46:42,090
从而并避免所有开发人员被困在Microsoft的软件中，也就是Visual Studio。
meaning Microsoft's visual studio.

645
00:46:43,260 --> 00:46:54,660
如今，Amazon的网络服务开始让人们感到恐慌，所以之前OpenStack是在对抗AWS的，  
And today it's Amazon web services that has everyone frightened and hence at least a while ago OpenStack was positioned against AWS.

646
00:46:54,661 --> 00:46:59,670
现在更多的就是Native Foundation computing foundation来进行与AWS的对抗。
It may be more the cloud Native Foundation computing foundation these days,

647
00:46:59,671 --> 00:47:12,510
OpenStack使用专利来保持垄断，但是Amazon的网络服务更加复杂，
but OpenStack clearly was trying to use this patent of keeping monopolists or near monopolists and check and was applying it to AWS. With Amazon web services,

648
00:47:12,511 --> 00:47:20,370
因为它不单单是一个软件。其中也涉及了对于硬件的资本投资，
Of course,
it's more complicated because it's not just the software any longer.
It's also the capital investment into the hardware,

651
00:47:20,371 --> 00:47:21,630
硬件是可以买到的。
but hardware can be bought.

652
00:47:21,631 --> 00:47:32,340
其实这只是一项资本投资，好多人都理解，但是依然是软件在操纵者全世界的数据中心。
It's really just a capital investment and mostly understood one and the software is still the challenge to operate that large,
those large data centers around the world.

654
00:47:35,250 --> 00:47:47,010
当基金会出现问题的时候，富有创造力的人总是能发现问题和挑战，除非这些问题被修复。
When the lad foundations have some dysfunctions,
of course,
creative people who always figure out also the downsides or
challenges until they get repaired and if,

658
00:47:47,011 --> 00:47:57,180
举个例子，一个基金会关于谁负责这些项目是不谨慎的以及也是不确定的，就像ASF那样。  
for example,
a foundation is not cautious enough about
who runs these projects and does not ensure
like the ASF,

663
00:47:57,181 --> 00:48:00,510
这几种是有多样性的问题的。
Does for example,
that there's committed diversity.

665
00:48:00,511 --> 00:48:18,150
基金会中现在的committer可以将竞争排除在外，可以在市场中为产品寻求互补产品。
Then the existing committers in a project can keep the competition out and can abuse the foundation as marketing channel for their project and have complimentary products to that project and so forth.

666
00:48:18,151 --> 00:48:19,020
就像我说的那样，
As I said,

667
00:48:19,021 --> 00:48:26,220
董事会的执行董事或者基金会的负责人可能胡介入这些事情，
the executive director of the board,
or whoever is in charge of the foundation,
could possibly step in.

670
00:48:26,221 --> 00:48:29,580
但是他们真的不喜欢这么做。
but they really don't like doing that.

671
00:48:29,581 --> 00:48:37,800
些领导干涉项目的运行是非常罕见的，这是最后的解决方案。
Interfering in how a project conducts its actions is really rare and is really a last resort,

672
00:48:37,801 --> 00:48:45,660
这你也或许不想这么去做，你可能想要项目自己去找出问题的解决方案，
because you don't want to do that,
you want
The project to figure out its own solutions to its problems.

675
00:48:45,661 --> 00:48:50,580
董事会介入的话就会很麻烦。
so it must be get really bad for a board to step in.

676
00:48:56,190 --> 00:49:01,590
所以我们有开源基金会，总的来说，开源基金会是可以实现社区引导的，    
So we have open source foundations
In general,
and then we had community led and now and then

679
00:49:01,591 --> 00:49:03,630
然后就是供应商所引引导的基金会。
Vendor-led Foundations,

680
00:49:03,631 --> 00:49:25,320
用户所引导的开源基金会的发展比较缓慢但是蕴含着巨大的机遇，其已经有15年的发展历史了。
I would like to talk about a huge opportunity and an interesting phenomenon that has been
slowly, more slowly than when the vendor-led foundations develop in developing,
but that's also already 15 years old.
and that phenomenon are the user-led open source foundations.

684
00:49:25,321 --> 00:49:32,550
所以一个用户所引导的开源基金会可以驱动成员，
So a user-led open source foundation as a foundation which has as the driving members,

685
00:49:32,551 --> 00:49:38,760
并且主要是由软件用户所主导的。
which is predominantly led by the users of softwares.

686
00:49:38,761 --> 00:49:43,620
总的来说这些用户角色并不存在于IT行业中，
hence not the IT industry in general unless they are user role,

687
00:49:43,621 --> 00:49:49,890
而是可能需要软件的其他行业。
but rather all the other industries who need software.

688
00:49:49,891 --> 00:49:58,950
你可能认为这种现象不是很常见，其实这种情况还是发展挺快的。
And if you think that's not so common,
I think again,
this is really up and coming,

691
00:49:58,951 --> 00:50:03,390
这曾经是我们在2020年的一个重要研究课题。
and that's why it's also an important research topic for us in this year,
2020.

693
00:50:03,391 --> 00:50:12,270
这有几个例子，比如Apereo基金会，  
Still,
here are a couple of examples,
and you can see how so,
for example,
Apereo foundation,

698
00:50:12,271 --> 00:50:17,850
它是有关大学中的教育软件，负责大学图书馆中的软件。
that's educational software for universities open library,

699
00:50:17,851 --> 00:50:24,840
所以这个基金会既不是大学也不是图书馆，而是软件行业的主要参与者，
that's for libraries.
neither universities nor libraries，
IT industry players. They're

703
00:50:24,841 --> 00:50:32,550
他们仅仅是类似金融服务的软件用户。ASWF也是一个很有意思的基金会，
just users of software, the financial services, industry uses this. The ASWF is an interesting one,

704
00:50:32,551 --> 00:50:42,990
该基金会可以确保主导软件的独立性。
that's a foundation to ensure independent, independence of some dominant
software.

706
00:50:42,991 --> 00:50:47,940
就电影渲染来说，RenderMan是一个闭源软件，
For movie rendering. So RenderMan is a close source software,

707
00:50:47,941 --> 00:50:52,890
所以我觉得ASWF就有一个可替代的解决方案，
and I believe the ASWF is having an alternative to that.

708
00:50:52,891 --> 00:50:54,330
Hollywood电影工作室意识到他们对于软件的依赖，
So it's the movie industry the

709
00:50:54,331 --> 00:51:06,210
但是他们为什么没有使用开源软件来对抗这个闭源软件呢？
Hollywood studios who realized their dependencies on closed source software and how they didn't want that and putting open source software against it.

710
00:51:07,710 --> 00:51:10,380
使用开源软件的一个后果就是，举一个我最喜欢的例子，  
An open consequence is 
a favorite example of mine,

712
00:51:10,381 --> 00:51:21,120
德国能源公司提供了一个用于管理“最后一公里电力”以及你房子周围的其他设施的管理人员，
These are German energy provides the stuckveck who managed the last kilometer of electricity and other utilities to your house,

713
00:51:21,121 --> 00:51:24,360
他们可能会需要一些智能软件。
and they needed software for the smart grid.

714
00:51:24,361 --> 00:51:28,230
德国能源公司并不是软件公司，但是该公司需要很多软件，
Ah,
they are not software companies,
they need a lot of software,

717
00:51:28,231 --> 00:51:39,570
所以他们在我的指导下联合起来创造了一些符合他们需要的软件。
so they joined forces under my guidance to create
this smart grid software for their own needs.

719
00:51:42,300 --> 00:51:53,190
这样的话，软件用户就不再是个人主体，但公司通常会这样做，因为他们厌倦了供应商锁定。
And users do that, software users
not the individual people,
but companies then usually do that because they got fed up with vendor lock-in.

722
00:51:54,780 --> 00:52:02,520
如果你是一个软件供应商，你希望把用户锁定到你的产品上。
So if you are a software vendor,
you like locke in off your users into your product.

724
00:52:02,521 --> 00:52:08,040
你作为一个用户，应该会不喜欢被供应商所锁定的产品，
If you're a user you do not like
locking into a vendor's products.

726
00:52:08,041 --> 00:52:11,490
以及因供应商锁定而引起的一系列问题。
What are the problems with vendor lock-in.

727
00:52:11,491 --> 00:52:18,870
软件供应商是以盈利为目的的实体，他们将尽可能地提高价格。  
Well, the vendor is a for-profit entity,
they will try to keep raising prices as much as they can.

729
00:52:20,160 --> 00:52:26,190
这样用户对于被一家供应商锁定的程度越高，那就意味着用户转向另一种选择的成本越高。
And the harder the lock-in,
meaning the higher the switching costs to an alternative,

731
00:52:26,191 --> 00:52:32,220
因为可能根本就没没有可抑制涨价产品的可替代解决方案，
all the way to there is no alternative means the vendor can keep rising prices.

732
00:52:33,420 --> 00:52:37,620
这其中涉及的不单单是用户成本。
But it's not just the costs to the user.

733
00:52:37,621 --> 00:52:44,670
如果一个供应商占主导地位，并丝毫不惧怕竞争，那么他们可能就会变的懒散。
if a vendor is dominant and has little to fear from competition,
the vendor gets lazy.

735
00:52:46,110 --> 00:52:52,290
用户可能会需要新的功能，那么软件供应商可能会要求顾客付费，
The users may need extra features;
they may need new features.
They may ask for these features,

738
00:52:52,291 --> 00:52:56,790
但是，供应商为什么要关心用户是否被锁定，用户是否需要付费呢？
but why does the vendor care if the users are locked in and are paying anyway?

739
00:52:57,930 --> 00:53:02,310
或许他们想成为一个优秀的软件供应商，或许也不是。
Maybe they want to be a good vendor,
but maybe not.

741
00:53:03,480 --> 00:53:13,860
新的发展创新需要资金，如果人们继续付钱的话，那么我们就要对未来的任何迅速回应， 
New development innovation costs money and if people keep paying anyway,
why we act speedily to any future requests,

743
00:53:13,861 --> 00:53:21,510
更不用说不同的用户公司之间可能存在竞争需求，
not to mention that different user companies have possibly competing needs,

744
00:53:21,511 --> 00:53:28,110
然后用户就会一直排队直到某件事情发生了变化。
and then the users have to get in line.
And maybe that line is long until something happens.

746
00:53:29,520 --> 00:53:35,790
很明显，开源是一个较好的可替换方案，因为花费是很低的，
And obviously open source is a great alternative because either cost is low and 

747
00:53:35,791 --> 00:53:40,200
并且如果你有一些工作要做的话，你可以自己做，也可以雇人帮你做。
if you need work done,
you can do it yourself or you can hire someone to do it for you.

749:41,460 --> 00:53:48,330
最后，公司或者产品的生命周期可能不同步。
Finally,
sometimes the life cycles of products or even companies are completely out of sync.

751
00:53:48,331 --> 00:53:56,910
 软件行业的发展非常迅速，可能一家已经成立了10年的弓虽就算是一家老公司了。
The software industry is pretty fast moving.
Ah,
a company which has been around for ten years,
is already an old company.

755
00:53:56,911 --> 00:54:01,590
但是在自动驾驶以及航天领域情况可能就不一样了，
not so say in the automotive or the aeronautics space,

756
00:54:01,591 --> 00:54:08,490
如果你是一家自动驾驶相关的公司，或者你是一家火车和机车的制造商。
So if you are an automotive company or you're a manufacturer of trains and locomotives,

757
00:54:08,491 --> 00:54:14,610
你可以看一下二三十年、甚至四五十年后你产品的生命周期，
you look at lifetimes of your products to twenty thirty,
forty or fifty years,

759
00:54:14,611 --> 00:54:21,120
飞机、火车仍然在生命周期中。操作你产品的软件供应商可能早就破产了，
planes locomotives can lift that long. Software vendors who software operates your products.

760
00:54:21,990 --> 00:54:27,060
也可能被收购了，也有已经停产了。
may have long gone out of business or have been bought and the products may have been discontinued.

761
00:54:27,061 --> 00:54:31,110
对于很多软件用户来说，这是一个很严重的操作风险，
That's a serious operational risk for many software users,

762
00:54:31,111 --> 00:54:34,080
所以很多用户可能会更喜欢开源软件。
and hence they prefer open source software,

763
00:54:34,081 --> 00:54:38,370
开源软件不会倒闭，它将总是存在并可以帮助到你。
which will not go out of business because it will always be around and you can help yourself.

764
00:54:38,371 --> 00:54:48,030
那么软件用户可能也意识到他们需要把软件命运掌握在自己手中，
So then,
software users realize maybe they need to take their
software fate into their own hands,

767
00:54:48,031 --> 00:54:58,350
这就是为什么他们要去创建用户引导的基金会，在那里存在着很多开源用户。
and that's why they decided to create user-led foundations where the users are in the sea and the purpose of
open source user, a user

769
00:54:58,351 --> 00:55:10,590
在开源基金会中用户可以创建、构造自己的软件供应链生态，   
Like open source foundation is to the users and commands so that they can create and structure their supplier ecosystem meaning they defined the rules,

770
00:55:10,591 --> 00:55:12,090
这也意味着他们自己正在定义产品、服务相关的规则？
how products and services,

771
00:55:12,091 --> 00:55:19,530
以及产品是如何建立在社区开源的基础上的？服务又是如何在社区开源的基础上进行提供的？
how products are build on community open source and how services are rendered on top of that,

772
00:55:19,531 --> 00:55:29,370
因此一个用户所引导的基金会将会管理并且赞助开源平台的开发，
hence a user-led foundation will manage and sponsor but sponsor and manage the development of some community open source platform.

773
00:55:29,371 --> 00:55:34,800
最终产品供应商以及商业咨询公司将建立在上面。
And then will let product vendors and service firms build 
on top of that.

775
00:55:35,670 --> 00:55:40,620
软件供应商与商业咨询公司总是想将所有的产品放在最上面，
And they will always want to make sure that all products build on top.

776
00:55:41,520 --> 00:55:47,190
相比于传统的闭源产品，这样来操作的话就可以减少很多供应商锁定，
Ah,
ah,
create much less lock in than a classic traditional

779
00:55:47,191 --> 00:55:58,050
这样软件用户可以很方便地切换不同的软件供应商以及不同的软件服务提供商。
closed source product, so that there's always the threat by a user that they can more easily switch to another vendor or another service provider.

780
00:55:58,051 --> 00:56:05,070
因为产品中的很大一部分都是社区开源软件，
Because a large part of the product is really what's in the community open source software,

781
00:56:05,071 --> 00:56:09,150
因此他们必须投资社区开源软件。
and hence they have to invest in the community open source software,

782
00:56:09,151 --> 00:56:18,510
这些公司可能面临切换软件供应商的风险，还可以保持较低的转化成本，从而与软件供应商保持一致。
and they get that threat to a switch and the benefit of lower switching costs that keeps vendors in line.

783
00:56:18,511 --> 00:56:26,760
这就是用户自己创建供应链生态系统的方式，这至少是一个想法。  
And that's the way how the users create their own supplier ecosystem.
That's at least the idea.

785
00:56:26,761 --> 00:56:28,380
更有趣的是，
Interestingly enough,

786
00:56:28,381 --> 00:56:35,760
这对于现有的开源基金会这更可能是一个商机，
It turned out to be a business opportunity
arguably for existing open source foundations.

788
00:56:35,761 --> 00:56:44,220
所以Linux基金会以及Eclipse基金会，Apache software foundation，
So the Linux Foundation and the Eclipse Foundation,
Sadly not the Apache software foundation
but the eclipse foundation,
for example,

792
00:56:44,221 --> 00:56:49,860
这些基金会都意识到了这个机会，并且建立了产业工作组的概念。
realized this opportunity and established the concept of industry working groups.

793
00:56:50,910 --> 00:56:55,800
产业工作组就是一个用户所引导的开源基金会，
When an industry working group really is,
A user-led open source foundation,

795
00:56:55,801 --> 00:56:59,730
以Eclipse基金会可能就是这些项目的宿主，
so the eclipse foundation may be the home for these projects,

796
00:56:59,731 --> 00:57:08,100
所以它们给予这些项目极大的灵活性以及管理规则。
but they give,
but it gives these projects so much flexibility and governance definition that the resulting projects,

798
00:57:08,101 --> 00:57:14,040
举个例子，AsciiDoc、openPASS、openMDM 、openMobility，   
for example,
AsciiDoc  or openPASS or openMDM or openMobility.

800
00:57:14,041 --> 00:57:20,880
就像右边所呈现的那样，它们都是独立的用户所主导的基金会。
Examples on the right here, act like they were individual user-led foundations.

801
00:57:22,020 --> 00:57:28,320
基于这种方式，Eclipse发展成员关系并保持和Linux Foundation的竞争关系。
and this way,
Eclipse grows its memberships can compete more effectively with the Linux Foundation and so forth.

803
00:57:29,340 --> 00:57:36,330
就商业角度来看，还没有人能够回答怎样利用这一点。其实收取会费并不是一个好的商机，
The question from a business perspective that nobody has been able to answer yet is how to take advantage of that.

804
00:57:37,980 --> 00:58:02,460
运行用户所主导基金会并且从产品和服务中获利才是，这使得软件供应商以及产品基于社区开源平台。
A membership fees that the eclipse foundation gathers are not the business opportunity, the business opportunity is running these user-led foundations and benefiting from the products and services that they offer to the users who are trying to keep the vendors in those base and the products based on those community open source platforms in check.

805
00:58:03,510 --> 00:58:07,620
但是还没有发现这一点，
But again nobody has cracked that yet.

806
00:58:07,621 --> 00:58:10,170
但这显然是一个巨大的商机。
But it is clearly a huge opportunity,

807
00:58:10,171 --> 00:58:15,780
随着更加智慧的建议，
because this is now increasingly as they smarten advising up.

808
00:58:16,920 --> 00:58:20,220
越来越多的人他们可能不是软件行业的参与者，但是有很多事他们也是可以做的。
What everyone who is not the software industry will do.

809
00:58:21,570 --> 00:58:32,730
举个自动驾驶行业的例子，这是相当有技术含量的一个行业。所以它们可以为开源做出很多贡献。  
My examples were saying the automotive industry,
so they are pretty technical,
so they can warm up to open source.

812
00:58:32,731 --> 00:58:36,660
到那时突然出现了Hollywood工作室，它们就不具备技术了吗？
But then suddenly there was a Hollywood studios.
Are they technical?

814
00:58:36,661 --> 00:58:52,920
或许这些工作室都变得聪明了。软件用户不太想受软件供应商的影响，
Well,
maybe,
and they got smarter.
and so what we'll travel and everyone who is a software user and who dislikes how they are at the mercy of software vendors,

818
00:58:52,921 --> 00:58:59,160
闭源软件供应商或许想创建一个用户所主导的基金会，
closed source software vendors may want to start on joining such a user-led foundation,

820
00:58:59,161 --> 00:59:10,050
所以我猜测闭源软件供应商领域将发生重大转变。这部分软件供应商继续获得更大的利润。
and hence I would expect a major shift in the industry and possibly arguably a threat to the good life of software vendors and their profits.

821
00:59:10,051 --> 00:59:15,180
无论如何，我们都可以预见商业开源以及未来的某些特性，  
Anyway,
we will see how this goes together with commercial open source and future lectures.

823
00:59:16,230 --> 00:59:31,950
最后说来，开源软件都会有相关的生命周期，它们出生、成长、成熟、消退、消亡，
So finally,
open source projects have a life cycle that's similar to products I would argue they are born,
they grow the mature decline,
That they might die.

827
00:59:31,951 --> 00:59:34,410
它们的寿命总是比预期的长。
They always live longer than expected.

828
00:59:35,400 --> 00:59:48,000
举个例子，cobol，其作为六十年代最初的编程语言，仍然非常活跃。
Because they're always users and well cobol,
for example,
as one of the original programming languages from the 60s is still very much alive and kicking.

831
00:59:48,001 --> 00:59:50,610
但是这个语言最终肯定会消亡，
But there might be death eventually,

832
00:59:50,611 --> 00:59:56,610
我们只是不知道什么时候而已。这就是为什么开源项目更像是一个软件而不是一个项目，
and we just don't know when, so that's why open source projects are more like products rather than projects.

833
00:59:58,470 --> 01:00:01,560
同样有趣的一件事就是开源项目是如何形成的？
What's also interesting is how they come into being.

834
01:00:01,561 --> 01:00:15,330
我来说明一下，一旦公司尤其是软件供应商意识到了顾客的需要，   
So I would argue that,
as soon as companies now realize,
in particular vendors, in the software industry that in this solution stack for customers,

837
01:00:15,331 --> 01:00:21,600
那么这些软件供应商就可能会获取领导地位,他们最终就会成为一个垄断者，
one layer is getting so dominant that they might become a monopolist and gobble up all the

838
01:00:22,620 --> 01:00:32,970
然后吞噬掉用户的预算。然后其他的组成部分将会保持这种竞争的存在。
budget of customers that then the other layers in the stack will join forces to keep that possible
monopolist and check. Let's explain.

840
01:00:32,971 --> 01:00:38,280
我来解释一下，这就引出了社区开源项目以及个人项目。
And that leads to community open source projects, individual projects,
even distributions.

842
01:00:39,150 --> 01:00:51,120
这就极大推进开源的商业化，这也是对创新的一种推动。
And that this is driving a commoditization of more and more and more open source and that this is kind of driving
innovation.

844
01:00:52,380 --> 01:00:53,130
进一步来说，
Further on,

845
01:00:53,131 --> 01:01:11,760
这更像是一场关于闭源软件的大爆炸事件，商业开源软件腾空而起，
it's like a big bang where the opportunity to make money by way of traditional closed source or even commercial open source is being driven away from the source of the universe by

846
01:01:12,660 --> 01:01:15,150
社区项目紧随其后。
community projects on their heels,

847
01:01:15,151 --> 01:01:24,660
所以开源软件需要不断创新，它们需要扩展到新的领域而不是固步自封。
so they need to keep in 
capture new ground rather than trying to occupy a established ground,

849
01:01:24,661 --> 01:01:29,610
随着时间的推移，会涌现出越来越多的社区开源软件。
which will be formally held over time by community open source projects.

850
01:01:31,740 --> 01:01:41,970
这就是我今天要讲的内容，我们提出了另一种看待开源以及开源创新的方式。  
So that's it for me. Today we discussed or we realized that there's a second way of looking at open source and the innovation of open source,

851
01:01:41,971 --> 01:01:46,260
开源不仅仅是代码产品，
which is not just the artifact on the source code,

852
01:01:46,261 --> 01:01:53,850
它还是一种协作方式，可以在项目中引导人们相互协作。
but rather than it's a way of collaboration
leading to projects of people collaborating.

854
01:01:53,851 --> 01:02:00,510
然后我们研究了开源项目以及开源社区相关的组织结构，
and then we looked at the organization structures behind projects and project communities.

855
01:02:00,511 --> 01:02:12,360
最初它们是自我组织的，然后就成长为有商业联系的开源基金会。
The original self-defined
Ones but then increasingly with growing commercial, growing commercial relevance,
the open source foundations.

858
01:02:12,361 --> 01:02:22,110
我们研究了不同类型的开源基金会，以及如何满足创始人和利益相关者的需求，研究了项目的生命周期。
and then we looked at the different types of open source foundations and how they satisfy the needs of their founders and stakeholders and closed with a look on project lifecycle.

859
01:02:22,111 --> 01:02:24,510
这jiu 是我今天要讲的内容，下节课我们将接受如何基于开源进行创业，
That's it from me today.

860
01:02:24,511 --> 01:02:46,890
我们将会了解很多知识产权以及开源项目控制机制的问题，控制机制可以合理引导开源项目的发展。
Next time we will start with how all of this can be turned around to have a commercial business based on open source. So we will utilize a lot of the knowledge we gained about intellectual property and control mechanism, mechanisms were still trying to be a proper open source project.

861
01:02:46,891 --> 01:02:50,550
感谢你的关注，我们下次再见！
Thank you very much for your time and attention and see you next time.
